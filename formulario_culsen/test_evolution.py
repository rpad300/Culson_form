#!/usr/bin/env python3
"""
Script de teste para Evolution API
Este script testa a conex√£o e funcionalidades b√°sicas do Evolution API
"""

import os
import sys
import json
from typing import Dict, Any
import time

# Adicionar o diret√≥rio utils ao path
sys.path.append(os.path.join(os.path.dirname(__file__), 'utils'))

try:
    from evopai import EvolutionAPI, create_evolution_client, load_evolution_config
except ImportError as e:
    print(f"Erro ao importar m√≥dulo Evolution API: {e}")
    print("Certifique-se de que o arquivo utils/evopai.py existe e est√° configurado corretamente.")
    sys.exit(1)

def print_separator(title: str):
    """Imprime um separador visual com t√≠tulo"""
    print("\n" + "="*60)
    print(f" {title} ")
    print("="*60)

def test_configuration():
    """Testa se as configura√ß√µes est√£o corretas"""
    print_separator("TESTE DE CONFIGURA√á√ÉO")
    
    try:
        config = load_evolution_config()
        print("‚úÖ Configura√ß√µes carregadas com sucesso:")
        for key, value in config.items():
            if 'key' in key.lower() or 'token' in key.lower():
                # Mascarar chaves sens√≠veis
                masked_value = value[:8] + "*" * (len(value) - 8) if len(value) > 8 else "****"
                print(f"   {key}: {masked_value}")
            else:
                print(f"   {key}: {value}")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao carregar configura√ß√µes: {e}")
        print("\nVerifique se as seguintes vari√°veis de ambiente est√£o configuradas:")
        print("   - EVOLUTION_API_URL")
        print("   - EVOLUTION_API_KEY")
        print("   - EVOLUTION_INSTANCE_NAME (opcional)")
        return False

def test_connection():
    """Testa a conex√£o com a Evolution API"""
    print_separator("TESTE DE CONEX√ÉO")
    
    try:
        evolution = create_evolution_client()
        print(f"‚úÖ Cliente Evolution API criado com sucesso")
        print(f"   URL Base: {evolution.base_url}")
        print(f"   Inst√¢ncia: {evolution.instance_name}")
        return evolution
        
    except Exception as e:
        print(f"‚ùå Erro ao criar cliente Evolution API: {e}")
        return None

def test_instance_status(evolution: EvolutionAPI):
    """Testa o status da inst√¢ncia"""
    print_separator("TESTE DE STATUS DA INST√ÇNCIA")
    
    try:
        status = evolution.get_instance_status()
        print("‚úÖ Status da inst√¢ncia obtido com sucesso:")
        print(json.dumps(status, indent=2, ensure_ascii=False))
        return status
        
    except Exception as e:
        print(f"‚ùå Erro ao obter status da inst√¢ncia: {e}")
        print("Isso pode indicar que:")
        print("   - A inst√¢ncia n√£o existe ainda")
        print("   - A URL da API est√° incorreta")
        print("   - A chave de API est√° inv√°lida")
        print("   - O servi√ßo Evolution API n√£o est√° rodando")
        return None

def test_qr_code(evolution: EvolutionAPI):
    """Testa a obten√ß√£o do QR Code"""
    print_separator("TESTE DE QR CODE")
    
    try:
        qr_response = evolution.get_qr_code()
        print("‚úÖ QR Code obtido com sucesso!")
        
        if 'base64' in qr_response:
            print("   QR Code dispon√≠vel em base64")
            # Salvar QR code em arquivo para visualiza√ß√£o
            qr_data = qr_response['base64']
            if qr_data.startswith('data:image'):
                # Remover prefixo data:image
                qr_data = qr_data.split(',')[1]
            
            try:
                import base64
                with open('qr_code.png', 'wb') as f:
                    f.write(base64.b64decode(qr_data))
                print("   QR Code salvo como 'qr_code.png'")
            except Exception as e:
                print(f"   Erro ao salvar QR Code: {e}")
        
        print(json.dumps(qr_response, indent=2, ensure_ascii=False))
        return qr_response
        
    except Exception as e:
        print(f"‚ùå Erro ao obter QR Code: {e}")
        return None

def test_instance_creation(evolution: EvolutionAPI):
    """Testa a cria√ß√£o de uma nova inst√¢ncia"""
    print_separator("TESTE DE CRIA√á√ÉO DE INST√ÇNCIA")
    
    try:
        instance_config = {
            "webhook": {
                "url": os.getenv('EVOLUTION_WEBHOOK_URL', ''),
                "webhook_by_events": True,
                "webhook_base64": True
            },
            "settings": {
                "reject_call": False,
                "msg_call": "Desculpe, n√£o posso atender chamadas no momento.",
                "groups_ignore": True,
                "always_online": False,
                "read_messages": False,
                "read_status": False
            }
        }
        
        result = evolution.create_instance(instance_config)
        print("‚úÖ Inst√¢ncia criada com sucesso!")
        print(json.dumps(result, indent=2, ensure_ascii=False))
        return result
        
    except Exception as e:
        print(f"‚ùå Erro ao criar inst√¢ncia: {e}")
        return None

def test_phone_formatting(evolution: EvolutionAPI):
    """Testa a formata√ß√£o de n√∫meros de telefone"""
    print_separator("TESTE DE FORMATA√á√ÉO DE TELEFONES")
    
    test_numbers = [
        "11999999999",
        "(11) 99999-9999",
        "+55 11 99999-9999",
        "5511999999999"
    ]
    
    print("Testando formata√ß√£o de n√∫meros:")
    for number in test_numbers:
        formatted = evolution.format_phone_number(number)
        print(f"   {number} ‚Üí {formatted}")
    
    print("\n‚úÖ Formata√ß√£o de telefones testada com sucesso!")

def main():
    """Fun√ß√£o principal do teste"""
    print("üöÄ INICIANDO TESTES DO EVOLUTION API")
    print("Este script ir√° testar a configura√ß√£o e conectividade com a Evolution API")
    
    # Teste 1: Configura√ß√£o
    if not test_configuration():
        return
    
    # Teste 2: Conex√£o
    evolution = test_connection()
    if not evolution:
        return
    
    # Teste 3: Formata√ß√£o de telefones
    test_phone_formatting(evolution)
    
    # Teste 4: Status da inst√¢ncia
    status = test_instance_status(evolution)
    
    # Se a inst√¢ncia n√£o existir, tentar criar
    if status is None:
        print("\nüîÑ Tentando criar nova inst√¢ncia...")
        creation_result = test_instance_creation(evolution)
        if creation_result:
            print("‚è≥ Aguardando alguns segundos para a inst√¢ncia se conectar...")
            time.sleep(5)
            status = test_instance_status(evolution)
    
    # Teste 5: QR Code (se necess√°rio)
    if status and 'state' in status:
        if status['state'] == 'close' or 'qr' in str(status).lower():
            test_qr_code(evolution)
    
    print_separator("RESUMO DOS TESTES")
    print("‚úÖ Configura√ß√£o: OK")
    print("‚úÖ Conex√£o: OK")
    print("‚úÖ Formata√ß√£o: OK")
    print(f"{'‚úÖ' if status else '‚ùå'} Status da Inst√¢ncia: {'OK' if status else 'ERRO'}")
    
    if status and 'state' in status:
        state = status['state']
        if state == 'open':
            print("‚úÖ WhatsApp conectado e pronto para uso!")
        elif state == 'close':
            print("‚ö†Ô∏è  WhatsApp n√£o conectado - escaneie o QR Code")
        else:
            print(f"‚ÑπÔ∏è  Estado do WhatsApp: {state}")
    
    print("\nüéâ Testes conclu√≠dos!")
    print("Se houver erros, verifique:")
    print("   1. Se a Evolution API est√° rodando")
    print("   2. Se as vari√°veis de ambiente est√£o configuradas")
    print("   3. Se a URL e chave de API est√£o corretas")

if __name__ == "__main__":
    main() 